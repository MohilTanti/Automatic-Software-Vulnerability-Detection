{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"BiLSTM_model.py","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPExoPhsSRfTLTOidfUVznN"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"sZ3ImDg8zlka"},"source":["from keras.models import Model\n","from keras.layers import Input, Dense, Embedding, Bidirectional, LSTM, GlobalMaxPooling1D\n","from keras.layers.core import Dropout\n","from keras import optimizers\n","\n","EPOCHS = 160\n","LOSS_FUNCTION = 'binary_crossentropy'\n","OPTIMIZER = 'adamax'\n","\n","learning_rate = 0.01\n","decay_rate = learning_rate / EPOCHS\n","\n","sgd = optimizers.SGD(lr=learning_rate, decay=decay_rate, nesterov=True)\n","OPTIMIZER = sgd\n","\n","def BiLSTM_network(MAX_LEN, EMBEDDING_DIM, word_index, embedding_matrix, use_dropout=False):\n","    inputs = Input(shape=(MAX_LEN,))\n","\n","    sharable_embedding = Embedding(len(word_index) + 1,\n","                               EMBEDDING_DIM,\n","                               weights=[embedding_matrix],\n","                               input_length=MAX_LEN,\n","                               trainable=False)(inputs)\n","    bilstm_1 = Bidirectional(LSTM(64, return_sequences=True), merge_mode='concat')(sharable_embedding)\n","    if use_dropout:\n","        droput_layer_1 = Dropout(0.5)(bilstm_1)\n","        bilstm_2 = Bidirectional(LSTM(64, return_sequences=True), merge_mode='concat')(droput_layer_1)\n","    else:\n","        bilstm_2 = Bidirectional(LSTM(64, return_sequences=True), merge_mode='concat')(bilstm_1)\n","    \n","    gmp_layer = GlobalMaxPooling1D()(bilstm_2)\n","    \n","    if use_dropout:\n","        dropout_layer_2 = Dropout(0.5)(gmp_layer)\n","        dense_1 = Dense(64, activation='relu')(dropout_layer_2)\n","    else:\n","        dense_1 = Dense(64, activation='relu')(gmp_layer)\n","        \n","    dense_2 = Dense(32)(dense_1)\n","    dense_3 = Dense(1, activation='sigmoid')(dense_2)\n","    \n","    model = Model(inputs=inputs, outputs = dense_3, name='BiLSTM_network')\n","    \n","    model.compile(loss=LOSS_FUNCTION,\n","             optimizer=OPTIMIZER,\n","             metrics=['accuracy'])\n","    \n","    return model"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6EnNjBqzmpIM"},"source":[""],"execution_count":null,"outputs":[]}]}